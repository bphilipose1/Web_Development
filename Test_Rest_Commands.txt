1. Add a new album

const albums = [
  {
    name: "Starboy",
    year: 2016,
    artist: "The Weeknd",
    genre: "R&B"
  },
  {
    name: "DawnFM",
    year: 2022,
    artist: "The Weeknd",
    genre: "Synthwave"
  },
  {
    name: "The College Dropout",
    year: 2004,
    artist: "Kanye West",
    genre: "Hip Hop"
  },
  {
    name: "My Beautiful Dark Twisted Fantasy",
    year: 2010,
    artist: "Kanye West",
    genre: "Hip Hop"
  },
  {
    name: "Kids See Ghosts",
    year: 2018,
    artist: ["Kanye West", "Kid Cudi"],
    genre: "Hip Hop"
  }
];

// Function to send POST requests for each album
albums.forEach(album => {
  fetch('http://localhost:3000/albums', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(album)
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => console.log('Album Created:', data))
    .catch(error => console.error('Error:', error.message));
});



2. List all albums


fetch('http://localhost:3000/albums', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json(); // Parse the response JSON
  })
  .then(data => console.log('All Albums:', data)) // Log all albums
  .catch(error => console.error('Error:', error.message));




3.Get the details of a specific album


fetch('http://localhost:3000/albums/My%20Beautiful%20Dark%20Twisted%20Fantasy', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json(); // Parse the response JSON
  })
  .then(data => console.log('Specific Album:', data)) // Log the specific album
  .catch(error => console.error('Error:', error.message));


4. Delete a specific album (and all of its associated tracks)

fetch('http://localhost:3000/albums/Kids%20See%20Ghosts', {
  method: 'DELETE', // HTTP DELETE method
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    console.log('Album deleted successfully!');
  })
  .catch(error => console.error('Error:', error.message));



5. Add a new track to a specific album

fetch('http://localhost:3000/albums/Starboy/tracks', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    title: "Starboy",
    duration: "3:50",
    primaryArtist: "The Weeknd"
  })
});



OR....


const albumsWithTracks = [
  {
    albumName: "Starboy",
    tracks: [
      { title: "Starboy", duration: "3:50", primaryArtist: "The Weeknd" },
      { title: "Party Monster", duration: "4:09", primaryArtist: "The Weeknd" },
      { title: "False Alarm", duration: "3:40", primaryArtist: "The Weeknd" },
      { title: "Reminder", duration: "3:38", primaryArtist: "The Weeknd" },
      { title: "Rockin'", duration: "3:52", primaryArtist: "The Weeknd" }
    ]
  },
  {
    albumName: "DawnFM",
    tracks: [
      { title: "Gasoline", duration: "3:32", primaryArtist: "The Weeknd" },
      { title: "How Do I Make You Love Me?", duration: "3:34", primaryArtist: "The Weeknd" },
      { title: "Take My Breath", duration: "5:39", primaryArtist: "The Weeknd" },
      { title: "Sacrifice", duration: "3:09", primaryArtist: "The Weeknd" },
      { title: "Out of Time", duration: "3:34", primaryArtist: "The Weeknd" }
    ]
  },
  {
    albumName: "The College Dropout",
    tracks: [
      { title: "We Don't Care", duration: "3:58", primaryArtist: "Kanye West" },
      { title: "Graduation Day", duration: "1:21", primaryArtist: "Kanye West" },
      { title: "All Falls Down", duration: "3:43", primaryArtist: "Kanye West" },
      { title: "Spaceship", duration: "5:24", primaryArtist: "Kanye West" },
      { title: "Jesus Walks", duration: "3:13", primaryArtist: "Kanye West" }
    ]
  },
  {
    albumName: "My Beautiful Dark Twisted Fantasy",
    tracks: [
      { title: "Dark Fantasy", duration: "4:40", primaryArtist: "Kanye West" },
      { title: "Gorgeous", duration: "5:58", primaryArtist: "Kanye West" },
      { title: "POWER", duration: "4:52", primaryArtist: "Kanye West" },
      { title: "All of the Lights", duration: "4:59", primaryArtist: "Kanye West" },
      { title: "Monster", duration: "6:18", primaryArtist: "Kanye West" }
    ]
  }
];

albumsWithTracks.forEach(album => {
  album.tracks.forEach(track => {
    fetch(`http://localhost:3000/albums/${encodeURIComponent(album.albumName)}/tracks`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(track)
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Failed to add track: ${track.title} to album: ${album.albumName}`);
        }
        return response.json();
      })
      .then(data => console.log(`Track added to album '${album.albumName}':`, data))
      .catch(error => console.error('Error:', error.message));
  });
});


6. Get the details all of the tracks for a specific album

const albumName = "Starboy"; // Replace with the desired album name

fetch(`http://localhost:3000/albums/${encodeURIComponent(albumName)}/tracks`, {
  method: 'GET',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`Failed to fetch tracks for album: ${albumName}. Status: ${response.status}`);
    }
    return response.json(); // Parse the JSON response
  })
  .then(data => console.log(`Tracks for album '${albumName}':`, data))
  .catch(error => console.error('Error:', error.message));


7. Delete a specific track

const albumName = "Starboy"; // Replace with the album name
const trackId = 4; // Replace with the ID of the track to delete

fetch(`http://localhost:3000/albums/${encodeURIComponent(albumName)}/tracks/${trackId}`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (response.status === 204) {
      console.log(`Track with ID ${trackId} from album '${albumName}' deleted successfully.`);
    } else if (!response.ok) {
      throw new Error(`Failed to delete track with ID ${trackId} from album '${albumName}'. Status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => console.log('Response:', data))
  .catch(error => console.error('Error:', error.message));


8. Add a new artist

fetch('http://localhost:3000/artists', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "The Weeknd",
    biography: "Canadian singer, songwriter, and record producer.",
    socialMediaLinks: ["https://twitter.com/theweeknd"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Added The Weeknd:', data))
  .catch(error => console.error('Error:', error.message));


fetch('http://localhost:3000/artists', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "Kanye West",
    biography: "American rapper, singer, songwriter, and record producer.",
    socialMediaLinks: ["https://twitter.com/kanyewest"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Added Kanye West:', data))
  .catch(error => console.error('Error:', error.message));


9. List all artists

fetch('http://localhost:3000/artists', {
  method: 'GET',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to fetch artists');
    }
    return response.json();
  })
  .then(data => console.log('All artists:', data))
  .catch(error => console.error('Error:', error.message));



10. Update a specific artist's name, biography, and/or social media links

------Test 1: Update the Name------
fetch('http://localhost:3000/artists/1', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "The Weeknd (Updated)"
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));

------Test 2: Update Biography and Social Media Links-----
fetch('http://localhost:3000/artists/1', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    biography: "Updated biography for The Weeknd.",
    socialMediaLinks: ["https://instagram.com/theweeknd"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));

-----Test 3: Update All Fields-----
fetch('http://localhost:3000/artists/2', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "Kanye West (Updated)",
    biography: "Updated biography for Kanye West.",
    socialMediaLinks: ["https://instagram.com/kanyewest"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));



List all concerts within a time range (minimum and maximum start time/date)
Change the start date/time of a specific concert