1. Add a new album

const albums = [
  {
    name: "Starboy",
    year: 2016,
    genre: "R&B"
  },
  {
    name: "DawnFM",
    year: 2022,
    genre: "Synthwave"
  },
  {
    name: "The College Dropout",
    year: 2004,
    genre: "Hip Hop"
  },
  {
    name: "My Beautiful Dark Twisted Fantasy",
    year: 2010,
    genre: "Hip Hop"
  },
  {
    name: "Kids See Ghosts",
    year: 2018,
    genre: "Hip Hop"
  }
];

// Function to send POST requests for each album
albums.forEach(album => {
  fetch('http://localhost:3000/albums', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(album)
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => console.log('Album Created:', data))
    .catch(error => console.error('Error:', error.message));
});


2. List all albums

fetch('http://localhost:3000/albums', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json(); // Parse the response JSON
  })
  .then(data => console.log('All Albums:', data)) // Log all albums
  .catch(error => console.error('Error:', error.message));



3.Get the details of a specific album

fetch('http://localhost:3000/albums/1', { // Replace 1 with the albumID you want
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return response.json(); // Parse the response JSON
  })
  .then(data => console.log('Specific Album:', data)) // Log the specific album
  .catch(error => console.error('Error:', error.message));

4. Delete a specific album (and all of its associated tracks)

fetch('http://localhost:3000/albums/1', { // Replace 1 with the albumID you want to delete
  method: 'DELETE',
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    console.log('Album deleted successfully!');
  })
  .catch(error => console.error('Error:', error.message));



5. Add a new track to a specific album


const albumsWithTracks = [
  {
    albumID: 1, // Replace with the correct albumID for "Starboy"
    tracks: [
      { title: "Starboy", duration: "3:50", primaryArtist: "The Weeknd" },
      { title: "Party Monster", duration: "4:09", primaryArtist: "The Weeknd" },
      { title: "False Alarm", duration: "3:40", primaryArtist: "The Weeknd" },
      { title: "Reminder", duration: "3:38", primaryArtist: "The Weeknd" },
      { title: "Rockin'", duration: "3:52", primaryArtist: "The Weeknd" }
    ]
  },
  {
    albumID: 2, // Replace with the correct albumID for "DawnFM"
    tracks: [
      { title: "Gasoline", duration: "3:32", primaryArtist: "The Weeknd" },
      { title: "How Do I Make You Love Me?", duration: "3:34", primaryArtist: "The Weeknd" },
      { title: "Take My Breath", duration: "5:39", primaryArtist: "The Weeknd" },
      { title: "Sacrifice", duration: "3:09", primaryArtist: "The Weeknd" },
      { title: "Out of Time", duration: "3:34", primaryArtist: "The Weeknd" }
    ]
  }
];

albumsWithTracks.forEach(album => {
  album.tracks.forEach(track => {
    fetch(`http://localhost:3000/albums/${album.albumID}/tracks`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(track)
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Failed to add track: ${track.title} to album ID: ${album.albumID}`);
        }
        return response.json();
      })
      .then(data => console.log(`Track added to album ID '${album.albumID}':`, data))
      .catch(error => console.error('Error:', error.message));
  });
});



6. Get the details all of the tracks for a specific album

const albumID = 1; // Replace with the desired albumID
fetch(`http://localhost:3000/albums/${albumID}/tracks`, {
  method: 'GET',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (!response.ok) {
      throw new Error(`Failed to fetch tracks for album ID: ${albumID}. Status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => console.log(`Tracks for album ID '${albumID}':`, data))
  .catch(error => console.error('Error:', error.message));


7. Delete a specific track

const albumID = 1; // Replace with the correct albumID
const trackID = 1; // Replace with the ID of the track to delete

fetch(`http://localhost:3000/albums/${albumID}/tracks/${trackID}`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (response.status === 200) {
      console.log(`Track with ID ${trackID} from album ID '${albumID}' deleted successfully.`);
    } else if (!response.ok) {
      throw new Error(`Failed to delete track with ID ${trackID} from album ID '${albumID}'. Status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => console.log('Deleted track:', data))
  .catch(error => console.error('Error:', error.message));



8. Add a new artist

fetch('http://localhost:3000/artists', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "The Weeknd",
    biography: "Canadian singer, songwriter, and record producer.",
    socialMediaLinks: ["https://twitter.com/theweeknd"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Added The Weeknd:', data))
  .catch(error => console.error('Error:', error.message));


fetch('http://localhost:3000/artists', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "Kanye West",
    biography: "American rapper, singer, songwriter, and record producer.",
    socialMediaLinks: ["https://twitter.com/kanyewest"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Added Kanye West:', data))
  .catch(error => console.error('Error:', error.message));


9. List all artists

fetch('http://localhost:3000/artists', {
  method: 'GET',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to fetch artists');
    }
    return response.json();
  })
  .then(data => console.log('All artists:', data))
  .catch(error => console.error('Error:', error.message));



10. Update a specific artist's name, biography, and/or social media links

------Test 1: Update the Name------
fetch('http://localhost:3000/artists/1', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "The Weeknd (Updated)"
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));

------Test 2: Update Biography and Social Media Links-----
fetch('http://localhost:3000/artists/1', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    biography: "Updated biography for The Weeknd.",
    socialMediaLinks: ["https://instagram.com/theweeknd"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));

-----Test 3: Update All Fields-----
fetch('http://localhost:3000/artists/2', {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    name: "Kanye West (Updated)",
    biography: "Updated biography for Kanye West.",
    socialMediaLinks: ["https://instagram.com/kanyewest"]
  })
})
  .then(response => response.json())
  .then(data => console.log('Updated artist:', data))
  .catch(error => console.error('Error:', error.message));



11.List all concerts within a time range (minimum and maximum start time/date)

---------ADD A NEW CONCERT------------
fetch('http://localhost:3000/concerts/StarboyTour', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    startTime: "2025-01-20T20:00:00Z",
    duration: "2 hours",
    artist: "The Weeknd",
    otherArtists: ["Doja Cat", "Drake"]
  })
})
  .then(response => response.json())
  .then(data => console.log('New concert added:', data))
  .catch(error => console.error('Error:', error.message));



--------------------MULTIPLE CONCERTS ADD---------------------------


const concerts = [
  {
    concertName: "StarboyTour",
    startTime: "2025-01-20T20:00:00Z",
    duration: "2 hours",
    artist: "The Weeknd",
    otherArtists: ["Doja Cat", "Drake"]
  },
  {
    concertName: "AfterHoursTilDawn",
    startTime: "2025-03-15T21:00:00Z",
    duration: "3 hours",
    artist: "The Weeknd",
    otherArtists: ["Ariana Grande"]
  },
  {
    concertName: "DondaExperience",
    startTime: "2025-04-10T19:00:00Z",
    duration: "2.5 hours",
    artist: "Kanye West",
    otherArtists: ["Jay-Z"]
  },
  {
    concertName: "RenaissanceTour",
    startTime: "2025-05-20T20:30:00Z",
    duration: "2 hours",
    artist: "Beyonc√©",
    otherArtists: ["Chloe x Halle"]
  },
  {
    concertName: "FolkloreEvermore",
    startTime: "2025-06-05T18:30:00Z",
    duration: "2 hours",
    artist: "Taylor Swift",
    otherArtists: []
  },
  {
    concertName: "FutureNostalgia",
    startTime: "2025-07-10T20:00:00Z",
    duration: "1.5 hours",
    artist: "Dua Lipa",
    otherArtists: []
  },
  {
    concertName: "DivideTour",
    startTime: "2025-08-15T19:00:00Z",
    duration: "2 hours",
    artist: "Ed Sheeran",
    otherArtists: []
  },
  {
    concertName: "JusticeWorldTour",
    startTime: "2025-09-20T21:00:00Z",
    duration: "2 hours",
    artist: "Justin Bieber",
    otherArtists: ["The Kid LAROI"]
  },
  {
    concertName: "HappierThanEverTour",
    startTime: "2025-10-25T20:00:00Z",
    duration: "2 hours",
    artist: "Billie Eilish",
    otherArtists: []
  },
  {
    concertName: "RockNRollRevival",
    startTime: "2025-11-30T20:30:00Z",
    duration: "3 hours",
    artist: "The Rolling Stones",
    otherArtists: ["Paul McCartney"]
  }
];

concerts.forEach(concert => {
  fetch(`http://localhost:3000/concerts/${concert.concertName}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      startTime: concert.startTime,
      duration: concert.duration,
      artist: concert.artist,
      otherArtists: concert.otherArtists
    })
  })
    .then(response => {
      if (!response.ok) throw new Error(`Failed to add concert: ${concert.concertName}`);
      return response.json();
    })
    .then(data => console.log(`Concert added successfully:`, data))
    .catch(error => console.error(error.message));
});



---------LISTS ALL CONCERTS WITHIN A TIME RANGE-------------

const minDate = "2025-06-01";
const maxDate = "2025-12-31";

fetch(`http://localhost:3000/concerts/range?minDate=${minDate}&maxDate=${maxDate}`, {
  method: 'GET',
  headers: { 'Content-Type': 'application/json' }
})
  .then(response => {
    if (!response.ok) throw new Error('Failed to fetch concerts within the specified time range.');
    return response.json();
  })
  .then(data => {
    console.log(`Concerts between ${minDate} and ${maxDate}:`, data);
  })
  .catch(error => console.error('Error:', error.message));



12. Change the start date/time of a specific concert

const concertToUpdate = "StarboyTour";
const newStartTime = "2025-01-21T20:00:00Z";

fetch(`http://localhost:3000/concerts/${concertToUpdate}`, {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    startTime: newStartTime
  })
})
  .then(response => {
    if (!response.ok) throw new Error(`Failed to update start time for ${concertToUpdate}`);
    return response.json();
  })
  .then(data => console.log(`Updated concert:`, data))
  .catch(error => console.error('Error:', error.message));
